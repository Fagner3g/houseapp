name: ci-cd

on:
  push:
    branches: [develop, main]
    paths:
      - 'api/**'
      - 'web/**'
      - 'deploy/stacks/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.0.1)'
        required: false
        default: ''
  release:
    types: [published]

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: [self-hosted, linux, ARM64]
    strategy:
      matrix:
        app: [api, web]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate semantic version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            # Use release tag for releases
            VERSION="${{ github.event.release.tag_name }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            # Use manual version from workflow_dispatch
            VERSION="${{ github.event.inputs.version }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            # Generate semantic version for branches
            BRANCH="${{ github.ref_name }}"
            SHA="${GITHUB_SHA::7}"
            DATE=$(date +%Y%m%d)
            
            if [ "$BRANCH" = "main" ]; then
              VERSION="1.0.0-$DATE-$SHA"
            else
              VERSION="0.1.0-$DATE-$SHA"
            fi
            
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi
          echo "Generated version: $VERSION"

      - name: Build and push image (native ARM64)
        run: |
          set -e
          REPO_LC=${GITHUB_REPOSITORY,,}
          IMAGE=ghcr.io/${REPO_LC}-${{ matrix.app }}
          VERSION="${{ steps.version.outputs.version }}"
          SHA=${GITHUB_SHA::7}
          BRANCH=${GITHUB_REF_NAME}
          
          echo "Building $IMAGE for native ARM64"
          echo "Tags: $VERSION, $SHA, $BRANCH"
          
          docker build \
            -f ${{ matrix.app }}/Dockerfile \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            -t $IMAGE:$VERSION \
            -t $IMAGE:$SHA \
            -t $IMAGE:$BRANCH \
            ${{ matrix.app }}
          
          docker push $IMAGE:$VERSION
          docker push $IMAGE:$SHA
          docker push $IMAGE:$BRANCH

      - name: Build summary
        run: |
          printf "### Build & Push (%s)\n- Image: ghcr.io/%s-%s\n- Tags: %s, %s, %s\n" \
            "${{ matrix.app }}" "${GITHUB_REPOSITORY,,}" "${{ matrix.app }}" "${{ steps.version.outputs.version }}" "${GITHUB_SHA::7}" "${GITHUB_REF_NAME}" >> "$GITHUB_STEP_SUMMARY"

  deploy:
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate semantic version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            BRANCH="${{ github.ref_name }}"
            SHA="${GITHUB_SHA::7}"
            DATE=$(date +%Y%m%d)
            
            if [ "$BRANCH" = "main" ]; then
              VERSION="1.0.0-$DATE-$SHA"
            else
              VERSION="0.1.0-$DATE-$SHA"
            fi
            
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Check deploy secrets
        id: check
        env:
          HAS_HOST: ${{ secrets.VPS_HOST }}
          HAS_USER: ${{ secrets.VPS_USER }}
          HAS_KEY: ${{ secrets.VPS_SSH_KEY }}
        run: |
          missing=0
          [ -z "$HAS_HOST" ] && echo "::warning title=Missing secret::VPS_HOST not set" && missing=1
          [ -z "$HAS_USER" ] && echo "::warning title=Missing secret::VPS_USER not set" && missing=1
          [ -z "$HAS_KEY" ] && echo "::warning title=Missing secret::VPS_SSH_KEY not set" && missing=1
          if [ $missing -eq 1 ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            printf "### Deploy skipped\nMissing secrets: VPS_HOST, VPS_USER and/or VPS_SSH_KEY\n" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Copy files to VPS
        if: steps.check.outputs.skip == 'false'
        run: |
          # Create SSH directory and key file
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/vps_key
          chmod 600 ~/.ssh/vps_key
          
          # Copy stack file to VPS
          scp -i ~/.ssh/vps_key -o StrictHostKeyChecking=no deploy/stacks/houseapp.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/stack.yml
          
          # Clean up SSH key
          rm ~/.ssh/vps_key

      - name: Env files validation (SSH) + Summary
        id: remote-validate
        if: steps.check.outputs.skip == 'false'
        run: |
          set -e
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/vps_key
          chmod 600 ~/.ssh/vps_key

          REPORT=$(ssh -i ~/.ssh/vps_key -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "bash -s -- '${{ github.repository }}' '${GITHUB_REF_NAME}'" << 'EOSSH'
          set -e
          REPO="$1"
          BRANCH="$2"
          STACK_DIR="/opt/stacks/houseapp"
          API_ENV="${STACK_DIR}/api.env"
          WEB_ENV="${STACK_DIR}/web.env"
          TMP_STACK="/tmp/stack.yml"

          # Ensure stack directory exists and move provided stack.yml
          sudo mkdir -p "${STACK_DIR}"
          if [ -f "${TMP_STACK}" ]; then
            sudo mv "${TMP_STACK}" "${STACK_DIR}/stack.yml"
            echo "📄 stack.yml updated in ${STACK_DIR}"
          fi

          # Always refresh example envs from repository to guide configuration
          curl -fsSL "https://raw.githubusercontent.com/${REPO}/${BRANCH}/deploy/env/api.env.example" | sudo tee "${STACK_DIR}/api.env.example" >/dev/null || true
          curl -fsSL "https://raw.githubusercontent.com/${REPO}/${BRANCH}/deploy/env/web.env.example" | sudo tee "${STACK_DIR}/web.env.example" >/dev/null || true

          extract() {
            FILE="$1"
            KEY="$2"
            if [ ! -f "$FILE" ]; then echo ""; return; fi
            grep -E "^$KEY=" "$FILE" | tail -n1 | cut -d= -f2- | sed -e 's/^"//' -e 's/"$//' -e "s/^'//" -e "s/'$//"
          }

          echo "### Env Files Validation"
          VALID=true
          if [ -f "$API_ENV" ]; then
            JWT_SECRET=$(extract "$API_ENV" JWT_SECRET)
            WEB_URL=$(extract "$API_ENV" WEB_URL)
            DB_PASSWORD=$(extract "$API_ENV" DB_PASSWORD)
            NODE_ENV=$(extract "$API_ENV" NODE_ENV)
            FAILS=0
            echo "- api.env: found"
            if [ -z "$JWT_SECRET" ] || [ "$JWT_SECRET" = "sua_jwt_secret_aqui" ]; then echo "  - ❌ JWT_SECRET missing/default"; FAILS=$((FAILS+1)); else echo "  - ✅ JWT_SECRET present"; fi
            if echo "$WEB_URL" | grep -Eq '^https?://'; then echo "  - ✅ WEB_URL ok ($WEB_URL)"; else echo "  - ❌ WEB_URL invalid/missing"; FAILS=$((FAILS+1)); fi
            if [ -n "$DB_PASSWORD" ]; then echo "  - ✅ DB_PASSWORD present"; else echo "  - ❌ DB_PASSWORD missing"; FAILS=$((FAILS+1)); fi
            if [ "$NODE_ENV" = "production" ] || [ "$NODE_ENV" = "staging" ] || [ "$NODE_ENV" = "development" ]; then echo "  - ✅ NODE_ENV=$NODE_ENV"; else echo "  - ❌ NODE_ENV invalid ($NODE_ENV)"; FAILS=$((FAILS+1)); fi
            if [ $FAILS -gt 0 ]; then
              echo "  - ℹ️  Review /opt/stacks/houseapp/api.env (copied from example?)"
              VALID=false
            else
              echo "  - ✅ api.env looks good"
            fi
          else
            echo "- api.env: not found. Example available at ${STACK_DIR}/api.env.example"
            VALID=false
          fi

          if [ -f "$WEB_ENV" ]; then
            echo "- web.env: found"
            echo "  - ℹ️  Ensure URLs and keys are correct for production"
          else
            echo "- web.env: not found. Example available at ${STACK_DIR}/web.env.example"
            VALID=false
          fi
          echo "VALID=$VALID"
          EOSSH
          )

          printf "%s\n" "$REPORT" >> "$GITHUB_STEP_SUMMARY"
          if echo "$REPORT" | grep -q '^VALID=true$'; then
            echo "valid=true" >> "$GITHUB_OUTPUT"
          else
            echo "valid=false" >> "$GITHUB_OUTPUT"
          fi
          rm ~/.ssh/vps_key

      - name: Deploy over SSH to Swarm
        if: steps.check.outputs.skip == 'false' && steps.remote-validate.outputs.valid == 'true'
        id: deploy
        continue-on-error: true
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            SHA=${GITHUB_SHA::7}
            VERSION="${{ steps.version.outputs.version }}"
            if [ "${GITHUB_REF_NAME}" = "develop" ]; then
              export TAG=develop
            else
              export TAG="$VERSION"
            fi

            # Create directory structure (if not exists)
            sudo mkdir -p /opt/stacks/houseapp

            # Move stack file from /tmp to final location
            sudo mv /tmp/stack.yml /opt/stacks/houseapp/stack.yml

            echo "📄 Updating stack.yml..."

            # Login to GHCR and deploy
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            echo "🚀 Deploying houseapp with TAG=$TAG (version: $VERSION)"
            docker stack deploy --with-registry-auth --resolve-image changed \
              -c /opt/stacks/houseapp/stack.yml houseapp
            
            echo "✅ Stack deployed successfully!"
            echo "📊 Check status: docker stack ps houseapp"

      - name: Deploy summary
        if: steps.deploy.outcome == 'success'
        run: |
          printf "### Deploy\n- Branch: %s\n- Version: %s\n- TAG: %s\n- Target: Swarm stack houseapp (SSH)\n" \
            "${GITHUB_REF_NAME}" "${{ steps.version.outputs.version }}" "${GITHUB_SHA::7}" >> "$GITHUB_STEP_SUMMARY"

      - name: Deploy skipped - env invalid
        if: steps.check.outputs.skip == 'false' && steps.remote-validate.outputs.valid != 'true'
        run: |
          printf "### Deploy Skipped\nEnv validation failed on VPS. Please review /opt/stacks/houseapp/*.env.\n" >> "$GITHUB_STEP_SUMMARY"
