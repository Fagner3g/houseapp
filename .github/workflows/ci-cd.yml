name: ci-cd

on:
  push:
    branches: [develop, main]
    paths:
      - 'api/**'
      - 'web/**'
      - 'deploy/stacks/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.0.1)'
        required: false
        default: ''
  release:
    types: [published]

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: [self-hosted, linux, ARM64]
    strategy:
      matrix:
        app: [api, web]
      max-parallel: 2
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate semantic version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            # Read version from root package.json using grep/sed
            BASE_VERSION=$(grep '"version"' package.json | sed 's/.*"version": "\([^"]*\)".*/\1/')
            BRANCH="${{ github.ref_name }}"
            SHA="${GITHUB_SHA::7}"
            
            if [ "$BRANCH" = "main" ]; then
              VERSION="$BASE_VERSION"
            else
              VERSION="$BASE_VERSION-$SHA-develop"
            fi
            
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.app }}
          push: true
          tags: |
            ghcr.io/fagner3g/houseapp-${{ matrix.app }}:${{ steps.version.outputs.version }}
          cache-from: type=registry,ref=ghcr.io/fagner3g/houseapp-${{ matrix.app }}:buildcache
          cache-to: type=registry,ref=ghcr.io/fagner3g/houseapp-${{ matrix.app }}:buildcache,mode=max
          platforms: linux/arm64
          build-args: |
            VITE_API_HOST=${{ matrix.app == 'web' && (github.ref_name == 'main' && 'https://api.jarvis.dev.br' || 'https://api.homolog.jarvis.dev.br') || '' }}

      - name: Build summary
        run: |
          echo "### Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **App:** ${{ matrix.app }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ghcr.io/fagner3g/houseapp-${{ matrix.app }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY

  deploy:
    needs: build-and-push
    runs-on: [self-hosted, linux, ARM64]
    if: github.event_name != 'pull_request'
    environment: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate semantic version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            # Read version from root package.json using grep/sed
            BASE_VERSION=$(grep '"version"' package.json | sed 's/.*"version": "\([^"]*\)".*/\1/')
            BRANCH="${{ github.ref_name }}"
            SHA="${GITHUB_SHA::7}"
            
            if [ "$BRANCH" = "main" ]; then
              VERSION="$BASE_VERSION"
            else
              VERSION="$BASE_VERSION-$SHA-develop"
            fi
            
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Check deploy secrets
        id: check
        run: |
          missing=0
          [ -z "${{ secrets.VPS_HOST }}" ] && echo "::warning title=Missing secret::VPS_HOST not set" && missing=1
          [ -z "${{ secrets.VPS_USER }}" ] && echo "::warning title=Missing secret::VPS_USER not set" && missing=1
          [ -z "${{ secrets.VPS_SSH_KEY }}" ] && echo "::warning title=Missing secret::VPS_SSH_KEY not set" && missing=1
          if [ $missing -eq 1 ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            printf "### Deploy skipped\nMissing secrets: VPS_HOST, VPS_USER and/or VPS_SSH_KEY\n" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate environment files
        if: steps.check.outputs.skip == 'false'
        id: validate
        run: |
          set -e
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/vps_key
          chmod 600 ~/.ssh/vps_key

          # Validate environment files on VPS
          VALIDATION_RESULT=$(ssh -i ~/.ssh/vps_key -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "bash -s -- '${{ github.ref_name }}'" << 'EOF'
            set -e
            BRANCH="$1"
            STACK_ROOT="/opt/stacks/houseapp"
            if [ "$BRANCH" = "main" ]; then
              STACK_DIR="${STACK_ROOT}/prod"
            else
              STACK_DIR="${STACK_ROOT}/homolog"
            fi
            API_ENV="${STACK_DIR}/api.env"
            WEB_ENV="${STACK_DIR}/web.env"
            
            VALID=true
            
            # Check API env file
            if [ -f "$API_ENV" ]; then
              JWT_SECRET=$(grep -E "^JWT_SECRET=" "$API_ENV" | tail -n1 | cut -d= -f2- | sed -e 's/^"//' -e 's/"$//' -e "s/^'//" -e "s/'$//")
              WEB_URL=$(grep -E "^WEB_URL=" "$API_ENV" | tail -n1 | cut -d= -f2- | sed -e 's/^"//' -e 's/"$//' -e "s/^'//" -e "s/'$//")
              DB_PASSWORD=$(grep -E "^DB_PASSWORD=" "$API_ENV" | tail -n1 | cut -d= -f2- | sed -e 's/^"//' -e 's/"$//' -e "s/^'//" -e "s/'$//")
              NODE_ENV=$(grep -E "^NODE_ENV=" "$API_ENV" | tail -n1 | cut -d= -f2- | sed -e 's/^"//' -e 's/"$//' -e "s/^'//" -e "s/'$//")
              
              if [ -z "$JWT_SECRET" ] || [ "$JWT_SECRET" = "sua_jwt_secret_aqui" ]; then
                echo "❌ JWT_SECRET missing/default"
                VALID=false
              fi
              
              if ! echo "$WEB_URL" | grep -Eq '^https?://'; then
                echo "❌ WEB_URL invalid/missing"
                VALID=false
              fi
              
              if [ -z "$DB_PASSWORD" ]; then
                echo "❌ DB_PASSWORD missing"
                VALID=false
              fi
              
              if [ "$NODE_ENV" != "production" ] && [ "$NODE_ENV" != "staging" ] && [ "$NODE_ENV" != "development" ]; then
                echo "❌ NODE_ENV invalid ($NODE_ENV)"
                VALID=false
              fi
            else
              echo "❌ api.env not found"
              VALID=false
            fi
            
            # Check WEB env file
            if [ ! -f "$WEB_ENV" ]; then
              echo "❌ web.env not found"
              VALID=false
            fi
            
            echo "VALID=$VALID"
          EOF
          )
          
          echo "$VALIDATION_RESULT" >> "$GITHUB_STEP_SUMMARY"
          
          if echo "$VALIDATION_RESULT" | grep -q '^VALID=true$'; then
            echo "valid=true" >> "$GITHUB_OUTPUT"
          else
            echo "valid=false" >> "$GITHUB_OUTPUT"
          fi
          
          rm ~/.ssh/vps_key

      - name: Deploy to VPS
        if: steps.check.outputs.skip == 'false' && steps.validate.outputs.valid == 'true'
        id: deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            
            # Set version and tag
            VERSION="${{ steps.version.outputs.version }}"
            TAG="$VERSION"
            BRANCH="${{ github.ref_name }}"

            # Select environment settings and paths
            if [ "$BRANCH" = "main" ]; then
              STACK_NAME="houseapp"
              STACK_DIR="/opt/stacks/houseapp/prod"
              REMOTE_YML="deploy/stacks/prod/houseapp.yml"
            else
              STACK_NAME="houseapp-homolog"
              STACK_DIR="/opt/stacks/houseapp/homolog"
              REMOTE_YML="deploy/stacks/homolog/houseapp.yml"
            fi

            # Ensure stack directory and cleanup root ymls
            sudo mkdir -p "$STACK_DIR"
            sudo find /opt/stacks -maxdepth 1 -type f -name '*.yml' -delete || true

            # Download stack file for the selected environment and replace TAG
            curl -fsSL "https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/$REMOTE_YML" \
              | sed "s/\${TAG:-develop}/$TAG/g" \
              | sudo tee "$STACK_DIR/stack.yml" >/dev/null

            # List directory to confirm files written
            echo "Listing $STACK_DIR contents:" 
            sudo ls -la "$STACK_DIR"

            # Login to GHCR
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

            # Pull images
            docker pull ghcr.io/fagner3g/houseapp-api:$TAG
            docker pull ghcr.io/fagner3g/houseapp-web:$TAG

            # Deploy stack
            docker stack deploy --with-registry-auth --resolve-image changed --prune -c "$STACK_DIR/stack.yml" "$STACK_NAME"

            # Show status
            docker stack ps "$STACK_NAME" --no-trunc | head -5

      - name: Deploy summary
        if: steps.deploy.outcome == 'success'
        run: |
          printf "### ✅ Deploy Successful\n" >> "$GITHUB_STEP_SUMMARY"
          printf "**Branch:** %s\n" "${{ github.ref_name }}" >> "$GITHUB_STEP_SUMMARY"
          printf "**Version:** %s\n" "${{ steps.version.outputs.version }}" >> "$GITHUB_STEP_SUMMARY"
          printf "**TAG:** %s\n" "${{ steps.version.outputs.version }}" >> "$GITHUB_STEP_SUMMARY"
          printf "**Target:** Swarm stack houseapp\n" >> "$GITHUB_STEP_SUMMARY"
          printf "**Services:** houseapp_api, houseapp_web\n" >> "$GITHUB_STEP_SUMMARY"

      - name: Deploy skipped - validation failed
        if: steps.check.outputs.skip == 'false' && steps.validate.outputs.valid != 'true'
        run: |
          echo "### Deploy Skipped" >> "$GITHUB_STEP_SUMMARY"
          echo "Environment validation failed on VPS. Please review:" >> "$GITHUB_STEP_SUMMARY"
          echo "- /opt/stacks/houseapp/prod/api.env" >> "$GITHUB_STEP_SUMMARY"
          echo "- /opt/stacks/houseapp/prod/web.env" >> "$GITHUB_STEP_SUMMARY"
          echo "- /opt/stacks/houseapp/homolog/api.env" >> "$GITHUB_STEP_SUMMARY"
          echo "- /opt/stacks/houseapp/homolog/web.env" >> "$GITHUB_STEP_SUMMARY"

      - name: Scale down services on validation failure
        if: steps.check.outputs.skip == 'false' && steps.validate.outputs.valid != 'true'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "⚠️ Scaling down services due to validation failure..."
            docker service scale houseapp_api=0 || true
            docker service scale houseapp_web=0 || true
            echo "✅ Services scaled down"