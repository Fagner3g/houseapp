name: ci-cd

on:
  push:
    branches: [develop, main]
    paths:
      - 'api/**'
      - 'web/**'
      - 'deploy/stacks/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.0.1)'
        required: false
        default: ''
  release:
    types: [published]

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: [self-hosted, linux, ARM64]
    strategy:
      matrix:
        app: [api, web]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate semantic version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            # Use release tag for releases
            VERSION="${{ github.event.release.tag_name }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            # Use manual version from workflow_dispatch
            VERSION="${{ github.event.inputs.version }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            # Generate semantic version for branches
            BRANCH="${{ github.ref_name }}"
            SHA="${GITHUB_SHA::7}"
            DATE=$(date +%Y%m%d)
            
            if [ "$BRANCH" = "main" ]; then
              VERSION="1.0.0-$DATE-$SHA"
            else
              VERSION="0.1.0-$DATE-$SHA"
            fi
            
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi
          echo "Generated version: $VERSION"

      - name: Build and push image (native ARM64)
        run: |
          set -e
          REPO_LC=${GITHUB_REPOSITORY,,}
          IMAGE=ghcr.io/${REPO_LC}-${{ matrix.app }}
          VERSION="${{ steps.version.outputs.version }}"
          SHA=${GITHUB_SHA::7}
          BRANCH=${GITHUB_REF_NAME}
          
          echo "Building $IMAGE for native ARM64"
          echo "Tags: $VERSION, $SHA, $BRANCH"
          
          docker build \
            -f ${{ matrix.app }}/Dockerfile \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            -t $IMAGE:$VERSION \
            -t $IMAGE:$SHA \
            -t $IMAGE:$BRANCH \
            ${{ matrix.app }}
          
          docker push $IMAGE:$VERSION
          docker push $IMAGE:$SHA
          docker push $IMAGE:$BRANCH

      - name: Build summary
        run: |
          printf "### Build & Push (%s)\n- Image: ghcr.io/%s-%s\n- Tags: %s, %s, %s\n" \
            "${{ matrix.app }}" "${GITHUB_REPOSITORY,,}" "${{ matrix.app }}" "${{ steps.version.outputs.version }}" "${GITHUB_SHA::7}" "${GITHUB_REF_NAME}" >> "$GITHUB_STEP_SUMMARY"

  deploy:
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate semantic version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            BRANCH="${{ github.ref_name }}"
            SHA="${GITHUB_SHA::7}"
            DATE=$(date +%Y%m%d)
            
            if [ "$BRANCH" = "main" ]; then
              VERSION="1.0.0-$DATE-$SHA"
            else
              VERSION="0.1.0-$DATE-$SHA"
            fi
            
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Check deploy secrets
        id: check
        env:
          HAS_HOST: ${{ secrets.VPS_HOST }}
          HAS_USER: ${{ secrets.VPS_USER }}
          HAS_KEY: ${{ secrets.VPS_SSH_KEY }}
        run: |
          missing=0
          [ -z "$HAS_HOST" ] && echo "::warning title=Missing secret::VPS_HOST not set" && missing=1
          [ -z "$HAS_USER" ] && echo "::warning title=Missing secret::VPS_USER not set" && missing=1
          [ -z "$HAS_KEY" ] && echo "::warning title=Missing secret::VPS_SSH_KEY not set" && missing=1
          if [ $missing -eq 1 ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            printf "### Deploy skipped\nMissing secrets: VPS_HOST, VPS_USER and/or VPS_SSH_KEY\n" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy over SSH to Swarm
        if: steps.check.outputs.skip == 'false'
        id: deploy
        continue-on-error: true
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "deploy/stacks/houseapp.yml"
          target: "/opt/stacks/houseapp/stack.yml"
          script: |
            set -e
            SHA=${GITHUB_SHA::7}
            VERSION="${{ steps.version.outputs.version }}"
            export TAG=$VERSION

            # Create directory structure
            sudo mkdir -p /opt/stacks/houseapp

            # Check if template files exist and copy them
            if [ -f "/opt/templates/houseapp/api.env" ]; then
              echo "Copying api.env from templates..."
              sudo cp /opt/templates/houseapp/api.env /opt/stacks/houseapp/api.env
            else
              echo "ERROR: Template file /opt/templates/houseapp/api.env not found!"
              echo "Please create the template file with real values:"
              echo "sudo mkdir -p /opt/templates/houseapp"
              echo "sudo nano /opt/templates/houseapp/api.env"
              exit 1
            fi

            if [ -f "/opt/templates/houseapp/web.env" ]; then
              echo "Copying web.env from templates..."
              sudo cp /opt/templates/houseapp/web.env /opt/stacks/houseapp/web.env
            else
              echo "ERROR: Template file /opt/templates/houseapp/web.env not found!"
              echo "Please create the template file with real values:"
              echo "sudo mkdir -p /opt/templates/houseapp"
              echo "sudo nano /opt/templates/houseapp/web.env"
              exit 1
            fi

            # Validate that env files don't contain example values
            if grep -q "sua_jwt_secret_aqui" /opt/stacks/houseapp/api.env || grep -q "sua_senha_do_banco" /opt/stacks/houseapp/api.env || grep -q "seu-dominio.com" /opt/stacks/houseapp/api.env; then
              echo "ERROR: api.env contains example values. Please configure with real values."
              echo "Required changes:"
              echo "- JWT_SECRET: configure sua chave secreta"
              echo "- DB_PASSWORD: configure sua senha do banco"
              echo "- WEB_URL: configure seu domínio real"
              echo "- DB_HOST: configure seu host do banco"
              exit 1
            fi

            if grep -q "seu-dominio.com" /opt/stacks/houseapp/web.env; then
              echo "ERROR: web.env contains example values. Please configure with real values."
              echo "Required changes:"
              echo "- VITE_API_HOST: configure seu domínio da API"
              exit 1
            fi

            echo "✅ Environment files validated successfully!"
            echo "📁 Stack files location: /opt/stacks/houseapp/"
            echo "📄 Files: stack.yml, api.env, web.env"

            # Login to GHCR and deploy
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            echo "🚀 Deploying houseapp with TAG=$TAG (version: $VERSION)"
            docker stack deploy -c /opt/stacks/houseapp/stack.yml houseapp --with-registry-auth
            
            echo "✅ Stack deployed successfully!"
            echo "📊 Check status: docker stack ps houseapp"

      - name: Deploy summary
        if: steps.deploy.outcome == 'success'
        run: |
          printf "### Deploy\n- Branch: %s\n- Version: %s\n- TAG: %s\n- Target: Swarm stack houseapp (SSH)\n" \
            "${GITHUB_REF_NAME}" "${{ steps.version.outputs.version }}" "${GITHUB_SHA::7}" >> "$GITHUB_STEP_SUMMARY"

      - name: Deploy failed - missing env files
        if: steps.deploy.outcome == 'failure'
        run: |
          printf "### Deploy Failed\nEnvironment files contain example values. Please configure with real values:\n- JWT_SECRET: configure sua chave secreta\n- DB_PASSWORD: configure sua senha do banco\n- WEB_URL: configure seu domínio real\n- VITE_API_HOST: configure seu domínio da API\n" >> "$GITHUB_STEP_SUMMARY"
