/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * HouseApp API
 * API for HouseApp
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { http } from '../client';
export type CreateNewUserBody = {
  /**
   * @minLength 2
   * @maxLength 2
   * @pattern ^\d+$
   */
  ddd: string;
  /**
   * @minLength 8
   * @maxLength 10
   */
  phone: string;
  name: string;
  /** @pattern ^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$ */
  email: string;
  inviteToken?: string;
};

export type ListUsers200UsersItem = {
  name: string;
  email: string;
  phone: string;
  ddd: string;
  avatarUrl: string;
  createdAt: string;
};

export type ListUsers200 = {
  users: ListUsers200UsersItem[];
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Authenticate with email
 */
export const getCreateNewUserUrl = () => {


  

  return `/new-user`
}

export const createNewUser = async (createNewUserBody: CreateNewUserBody, options?: RequestInit): Promise<void> => {
  
  return http<void>(getCreateNewUserUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createNewUserBody,)
  }
);}




export const getCreateNewUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewUser>>, TError,{data: CreateNewUserBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof createNewUser>>, TError,{data: CreateNewUserBody}, TContext> => {

const mutationKey = ['createNewUser'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createNewUser>>, {data: CreateNewUserBody}> = (props) => {
          const {data} = props ?? {};

          return  createNewUser(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateNewUserMutationResult = NonNullable<Awaited<ReturnType<typeof createNewUser>>>
    export type CreateNewUserMutationBody = CreateNewUserBody
    export type CreateNewUserMutationError = unknown

    export const useCreateNewUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewUser>>, TError,{data: CreateNewUserBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createNewUser>>,
        TError,
        {data: CreateNewUserBody},
        TContext
      > => {

      const mutationOptions = getCreateNewUserMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * List all users in an organization
 */
export const getListUsersUrl = (slug: string,) => {


  

  return `/org/${slug}/users`
}

export const listUsers = async (slug: string, options?: RequestInit): Promise<ListUsers200> => {
  
  return http<ListUsers200>(getListUsersUrl(slug),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getListUsersQueryKey = (slug: string,) => {
    return [`/org/${slug}/users`] as const;
    }

    
export const getListUsersQueryOptions = <TData = Awaited<ReturnType<typeof listUsers>>, TError = unknown>(slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListUsersQueryKey(slug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listUsers>>> = ({ signal }) => listUsers(slug, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(slug), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListUsersQueryResult = NonNullable<Awaited<ReturnType<typeof listUsers>>>
export type ListUsersQueryError = unknown


export function useListUsers<TData = Awaited<ReturnType<typeof listUsers>>, TError = unknown>(
 slug: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listUsers>>,
          TError,
          Awaited<ReturnType<typeof listUsers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListUsers<TData = Awaited<ReturnType<typeof listUsers>>, TError = unknown>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listUsers>>,
          TError,
          Awaited<ReturnType<typeof listUsers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListUsers<TData = Awaited<ReturnType<typeof listUsers>>, TError = unknown>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useListUsers<TData = Awaited<ReturnType<typeof listUsers>>, TError = unknown>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListUsersQueryOptions(slug,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
