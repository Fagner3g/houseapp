/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/__root'
import { Route as AuthLayoutRouteImport } from './pages/_auth/layout'
import { Route as AppLayoutRouteImport } from './pages/_app/layout'
import { Route as AuthValidateLinkRouteImport } from './pages/_auth/validate-link'
import { Route as AuthSignUpRouteImport } from './pages/_auth/sign-up'
import { Route as AuthSignInRouteImport } from './pages/_auth/sign-in'
import { Route as AppgoalGoalsRouteImport } from './pages/_app/(goal)/goals'
import { Route as AppexpenseExpensesRouteImport } from './pages/_app/(expense)/expenses'
import { Route as AppdashboardDashboardRouteImport } from './pages/_app/(dashboard)/dashboard'

const AuthLayoutRoute = AuthLayoutRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppLayoutRoute = AppLayoutRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthValidateLinkRoute = AuthValidateLinkRouteImport.update({
  id: '/validate-link',
  path: '/validate-link',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AuthSignUpRoute = AuthSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AppgoalGoalsRoute = AppgoalGoalsRouteImport.update({
  id: '/(goal)/goals',
  path: '/goals',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppexpenseExpensesRoute = AppexpenseExpensesRouteImport.update({
  id: '/(expense)/expenses',
  path: '/expenses',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppdashboardDashboardRoute = AppdashboardDashboardRouteImport.update({
  id: '/(dashboard)/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/sign-in': typeof AuthSignInRoute
  '/sign-up': typeof AuthSignUpRoute
  '/validate-link': typeof AuthValidateLinkRoute
  '/dashboard': typeof AppdashboardDashboardRoute
  '/expenses': typeof AppexpenseExpensesRoute
  '/goals': typeof AppgoalGoalsRoute
}
export interface FileRoutesByTo {
  '/sign-in': typeof AuthSignInRoute
  '/sign-up': typeof AuthSignUpRoute
  '/validate-link': typeof AuthValidateLinkRoute
  '/dashboard': typeof AppdashboardDashboardRoute
  '/expenses': typeof AppexpenseExpensesRoute
  '/goals': typeof AppgoalGoalsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppLayoutRouteWithChildren
  '/_auth': typeof AuthLayoutRouteWithChildren
  '/_auth/sign-in': typeof AuthSignInRoute
  '/_auth/sign-up': typeof AuthSignUpRoute
  '/_auth/validate-link': typeof AuthValidateLinkRoute
  '/_app/(dashboard)/dashboard': typeof AppdashboardDashboardRoute
  '/_app/(expense)/expenses': typeof AppexpenseExpensesRoute
  '/_app/(goal)/goals': typeof AppgoalGoalsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/sign-in'
    | '/sign-up'
    | '/validate-link'
    | '/dashboard'
    | '/expenses'
    | '/goals'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/sign-in'
    | '/sign-up'
    | '/validate-link'
    | '/dashboard'
    | '/expenses'
    | '/goals'
  id:
    | '__root__'
    | '/_app'
    | '/_auth'
    | '/_auth/sign-in'
    | '/_auth/sign-up'
    | '/_auth/validate-link'
    | '/_app/(dashboard)/dashboard'
    | '/_app/(expense)/expenses'
    | '/_app/(goal)/goals'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/validate-link': {
      id: '/_auth/validate-link'
      path: '/validate-link'
      fullPath: '/validate-link'
      preLoaderRoute: typeof AuthValidateLinkRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_auth/sign-up': {
      id: '/_auth/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AuthSignUpRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_auth/sign-in': {
      id: '/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_app/(goal)/goals': {
      id: '/_app/(goal)/goals'
      path: '/goals'
      fullPath: '/goals'
      preLoaderRoute: typeof AppgoalGoalsRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/(expense)/expenses': {
      id: '/_app/(expense)/expenses'
      path: '/expenses'
      fullPath: '/expenses'
      preLoaderRoute: typeof AppexpenseExpensesRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/(dashboard)/dashboard': {
      id: '/_app/(dashboard)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AppdashboardDashboardRouteImport
      parentRoute: typeof AppLayoutRoute
    }
  }
}

interface AppLayoutRouteChildren {
  AppdashboardDashboardRoute: typeof AppdashboardDashboardRoute
  AppexpenseExpensesRoute: typeof AppexpenseExpensesRoute
  AppgoalGoalsRoute: typeof AppgoalGoalsRoute
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppdashboardDashboardRoute: AppdashboardDashboardRoute,
  AppexpenseExpensesRoute: AppexpenseExpensesRoute,
  AppgoalGoalsRoute: AppgoalGoalsRoute,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

interface AuthLayoutRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
  AuthValidateLinkRoute: typeof AuthValidateLinkRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
  AuthValidateLinkRoute: AuthValidateLinkRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppLayoutRoute: AppLayoutRouteWithChildren,
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
