/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/__root'
import { Route as AuthLayoutRouteImport } from './pages/_auth/layout'
import { Route as AppLayoutRouteImport } from './pages/_app/layout'
import { Route as AuthValidateRouteImport } from './pages/_auth/validate'
import { Route as AuthSignUpRouteImport } from './pages/_auth/sign-up'
import { Route as AuthSignInRouteImport } from './pages/_auth/sign-in'
import { Route as AuthInviteRouteImport } from './pages/_auth/invite'
import { Route as AppNewOrgRouteImport } from './pages/_app/new-org'
import { Route as AppOrguserUsersRouteImport } from './pages/_app/$org/(user)/users'
import { Route as AppOrgtransactionsTransactionsRouteImport } from './pages/_app/$org/(transactions)/transactions'
import { Route as AppOrggoalGoalsRouteImport } from './pages/_app/$org/(goal)/goals'
import { Route as AppOrgdashboardDashboardRouteImport } from './pages/_app/$org/(dashboard)/dashboard'
import { Route as AppOrgadminJobsRouteImport } from './pages/_app/$org/(admin)/jobs'

const AuthLayoutRoute = AuthLayoutRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppLayoutRoute = AppLayoutRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthValidateRoute = AuthValidateRouteImport.update({
  id: '/validate',
  path: '/validate',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AuthSignUpRoute = AuthSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AuthInviteRoute = AuthInviteRouteImport.update({
  id: '/invite',
  path: '/invite',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AppNewOrgRoute = AppNewOrgRouteImport.update({
  id: '/new-org',
  path: '/new-org',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppOrguserUsersRoute = AppOrguserUsersRouteImport.update({
  id: '/$org/(user)/users',
  path: '/$org/users',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppOrgtransactionsTransactionsRoute =
  AppOrgtransactionsTransactionsRouteImport.update({
    id: '/$org/(transactions)/transactions',
    path: '/$org/transactions',
    getParentRoute: () => AppLayoutRoute,
  } as any)
const AppOrggoalGoalsRoute = AppOrggoalGoalsRouteImport.update({
  id: '/$org/(goal)/goals',
  path: '/$org/goals',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppOrgdashboardDashboardRoute =
  AppOrgdashboardDashboardRouteImport.update({
    id: '/$org/(dashboard)/dashboard',
    path: '/$org/dashboard',
    getParentRoute: () => AppLayoutRoute,
  } as any)
const AppOrgadminJobsRoute = AppOrgadminJobsRouteImport.update({
  id: '/$org/(admin)/jobs',
  path: '/$org/jobs',
  getParentRoute: () => AppLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/new-org': typeof AppNewOrgRoute
  '/invite': typeof AuthInviteRoute
  '/sign-in': typeof AuthSignInRoute
  '/sign-up': typeof AuthSignUpRoute
  '/validate': typeof AuthValidateRoute
  '/$org/jobs': typeof AppOrgadminJobsRoute
  '/$org/dashboard': typeof AppOrgdashboardDashboardRoute
  '/$org/goals': typeof AppOrggoalGoalsRoute
  '/$org/transactions': typeof AppOrgtransactionsTransactionsRoute
  '/$org/users': typeof AppOrguserUsersRoute
}
export interface FileRoutesByTo {
  '/new-org': typeof AppNewOrgRoute
  '/invite': typeof AuthInviteRoute
  '/sign-in': typeof AuthSignInRoute
  '/sign-up': typeof AuthSignUpRoute
  '/validate': typeof AuthValidateRoute
  '/$org/jobs': typeof AppOrgadminJobsRoute
  '/$org/dashboard': typeof AppOrgdashboardDashboardRoute
  '/$org/goals': typeof AppOrggoalGoalsRoute
  '/$org/transactions': typeof AppOrgtransactionsTransactionsRoute
  '/$org/users': typeof AppOrguserUsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppLayoutRouteWithChildren
  '/_auth': typeof AuthLayoutRouteWithChildren
  '/_app/new-org': typeof AppNewOrgRoute
  '/_auth/invite': typeof AuthInviteRoute
  '/_auth/sign-in': typeof AuthSignInRoute
  '/_auth/sign-up': typeof AuthSignUpRoute
  '/_auth/validate': typeof AuthValidateRoute
  '/_app/$org/(admin)/jobs': typeof AppOrgadminJobsRoute
  '/_app/$org/(dashboard)/dashboard': typeof AppOrgdashboardDashboardRoute
  '/_app/$org/(goal)/goals': typeof AppOrggoalGoalsRoute
  '/_app/$org/(transactions)/transactions': typeof AppOrgtransactionsTransactionsRoute
  '/_app/$org/(user)/users': typeof AppOrguserUsersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/new-org'
    | '/invite'
    | '/sign-in'
    | '/sign-up'
    | '/validate'
    | '/$org/jobs'
    | '/$org/dashboard'
    | '/$org/goals'
    | '/$org/transactions'
    | '/$org/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/new-org'
    | '/invite'
    | '/sign-in'
    | '/sign-up'
    | '/validate'
    | '/$org/jobs'
    | '/$org/dashboard'
    | '/$org/goals'
    | '/$org/transactions'
    | '/$org/users'
  id:
    | '__root__'
    | '/_app'
    | '/_auth'
    | '/_app/new-org'
    | '/_auth/invite'
    | '/_auth/sign-in'
    | '/_auth/sign-up'
    | '/_auth/validate'
    | '/_app/$org/(admin)/jobs'
    | '/_app/$org/(dashboard)/dashboard'
    | '/_app/$org/(goal)/goals'
    | '/_app/$org/(transactions)/transactions'
    | '/_app/$org/(user)/users'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/validate': {
      id: '/_auth/validate'
      path: '/validate'
      fullPath: '/validate'
      preLoaderRoute: typeof AuthValidateRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_auth/sign-up': {
      id: '/_auth/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AuthSignUpRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_auth/sign-in': {
      id: '/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_auth/invite': {
      id: '/_auth/invite'
      path: '/invite'
      fullPath: '/invite'
      preLoaderRoute: typeof AuthInviteRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_app/new-org': {
      id: '/_app/new-org'
      path: '/new-org'
      fullPath: '/new-org'
      preLoaderRoute: typeof AppNewOrgRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/$org/(user)/users': {
      id: '/_app/$org/(user)/users'
      path: '/$org/users'
      fullPath: '/$org/users'
      preLoaderRoute: typeof AppOrguserUsersRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/$org/(transactions)/transactions': {
      id: '/_app/$org/(transactions)/transactions'
      path: '/$org/transactions'
      fullPath: '/$org/transactions'
      preLoaderRoute: typeof AppOrgtransactionsTransactionsRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/$org/(goal)/goals': {
      id: '/_app/$org/(goal)/goals'
      path: '/$org/goals'
      fullPath: '/$org/goals'
      preLoaderRoute: typeof AppOrggoalGoalsRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/$org/(dashboard)/dashboard': {
      id: '/_app/$org/(dashboard)/dashboard'
      path: '/$org/dashboard'
      fullPath: '/$org/dashboard'
      preLoaderRoute: typeof AppOrgdashboardDashboardRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/$org/(admin)/jobs': {
      id: '/_app/$org/(admin)/jobs'
      path: '/$org/jobs'
      fullPath: '/$org/jobs'
      preLoaderRoute: typeof AppOrgadminJobsRouteImport
      parentRoute: typeof AppLayoutRoute
    }
  }
}

interface AppLayoutRouteChildren {
  AppNewOrgRoute: typeof AppNewOrgRoute
  AppOrgadminJobsRoute: typeof AppOrgadminJobsRoute
  AppOrgdashboardDashboardRoute: typeof AppOrgdashboardDashboardRoute
  AppOrggoalGoalsRoute: typeof AppOrggoalGoalsRoute
  AppOrgtransactionsTransactionsRoute: typeof AppOrgtransactionsTransactionsRoute
  AppOrguserUsersRoute: typeof AppOrguserUsersRoute
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppNewOrgRoute: AppNewOrgRoute,
  AppOrgadminJobsRoute: AppOrgadminJobsRoute,
  AppOrgdashboardDashboardRoute: AppOrgdashboardDashboardRoute,
  AppOrggoalGoalsRoute: AppOrggoalGoalsRoute,
  AppOrgtransactionsTransactionsRoute: AppOrgtransactionsTransactionsRoute,
  AppOrguserUsersRoute: AppOrguserUsersRoute,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

interface AuthLayoutRouteChildren {
  AuthInviteRoute: typeof AuthInviteRoute
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
  AuthValidateRoute: typeof AuthValidateRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthInviteRoute: AuthInviteRoute,
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
  AuthValidateRoute: AuthValidateRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppLayoutRoute: AppLayoutRouteWithChildren,
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
